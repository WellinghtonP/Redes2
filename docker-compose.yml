version: '3.8'

services:
  # Camada de Apresentação - Nginx
  nginx:
    build: 
      context: ./nginx
    container_name: nginx-container
    ports:
      - "80:80"
    depends_on:
      app: # MODIFICADO: Adicionada a condição de 'healthy'
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Camada Lógica - Aplicação Node.js
  app:
    build: 
      context: ./app
      args:
        # URL do repositório Git (clonado durante o build)
        GIT_REPO: https://github.com/WellinghtonP/Redes2.git
    container_name: app-container
    environment:
      # Variáveis de ambiente para conexão com o banco
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-appdb}
      DB_USER: ${DB_USER:-appuser}
      DB_PASSWORD: ${DB_PASSWORD:-apppassword}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # ADICIONADO: Healthcheck para a aplicação
    healthcheck:
      # Tenta acessar a aplicação via curl. Você pode precisar de 'apk add curl' no seu Dockerfile do app.
      # Se sua app tiver uma rota específica de healthcheck (ex: /health), use-a.
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Dá 30 segundos para a app iniciar antes de começar a verificar

  # Camada de Dados - PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres-container
    environment:
      POSTGRES_DB: ${DB_NAME:-appdb}
      POSTGRES_USER: ${DB_USER:-appuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-apppassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-appuser} -d ${DB_NAME:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer - Interface web para gerenciar o banco (opcional)
  adminer:
    image: adminer
    container_name: adminer-container
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
